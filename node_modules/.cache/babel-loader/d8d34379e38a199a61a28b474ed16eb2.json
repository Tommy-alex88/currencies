{"ast":null,"code":"import _slicedToArray from\"/home/alexander/dev/react-game/Tommy-alex88.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useCallback}from\"react\";import{Switch,Route}from\"react-router-dom\";import{useDispatch,useSelector}from\"react-redux\";import Layout from\"./components/Layout/Layout\";import HomePage from\"./pages/HomePage\";import Currencies from\"./components/Currencies/Currencies\";import{currenciesActions}from\"./store\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var dispatch=useDispatch();var baseCurrency=useSelector(function(state){return state.baseCurrency;});// fetching list of currencies for storing in global state (redux store)\n// based on selected base currency (RUB by default)\nvar fetchCurrenciesList=useCallback(function(){dispatch(currenciesActions.updateLoadingStatus(true));var url=\"https://api.exchangerate.host/latest?base=\".concat(baseCurrency);fetch(url).then(function(response){if(!response.ok){throw new Error(\"Something went wrong!\");}return response.json();}).then(function(data){var curRates=[];for(var _i=0,_Object$entries=Object.entries(data.rates);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];curRates.push({name:key,value:value});}dispatch(currenciesActions.update(curRates));dispatch(currenciesActions.updateLoadingStatus(false));}).catch(function(err){return console.log(err.message);});},[baseCurrency,dispatch]);useEffect(function(){fetchCurrenciesList();},[fetchCurrenciesList]);return/*#__PURE__*/_jsx(Layout,{children:/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",exact:true,children:/*#__PURE__*/_jsx(HomePage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/currencies\",exact:true,children:/*#__PURE__*/_jsx(Currencies,{})})]})});}export default App;","map":{"version":3,"sources":["/home/alexander/dev/react-game/Tommy-alex88.github.io/src/App.js"],"names":["useEffect","useCallback","Switch","Route","useDispatch","useSelector","Layout","HomePage","Currencies","currenciesActions","App","dispatch","baseCurrency","state","fetchCurrenciesList","updateLoadingStatus","url","fetch","then","response","ok","Error","json","data","curRates","Object","entries","rates","key","value","push","name","update","catch","err","console","log","message"],"mappings":"wIAAA,OAASA,SAAT,CAAoBC,WAApB,KAAuC,OAAvC,CACA,OAASC,MAAT,CAAiBC,KAAjB,KAA8B,kBAA9B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAOC,CAAAA,MAAP,KAAmB,4BAAnB,CACA,MAAOC,CAAAA,QAAP,KAAqB,kBAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,oCAAvB,CACA,OAASC,iBAAT,KAAkC,SAAlC,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACb,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CACA,GAAMQ,CAAAA,YAAY,CAAGP,WAAW,CAAC,SAACQ,KAAD,QAAWA,CAAAA,KAAK,CAACD,YAAjB,EAAD,CAAhC,CAEA;AACA;AACA,GAAME,CAAAA,mBAAmB,CAAGb,WAAW,CAAC,UAAM,CAC5CU,QAAQ,CAACF,iBAAiB,CAACM,mBAAlB,CAAsC,IAAtC,CAAD,CAAR,CACA,GAAMC,CAAAA,GAAG,qDAAgDJ,YAAhD,CAAT,CAEAK,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQ,SAACC,QAAD,CAAc,CAClB,GAAI,CAACA,QAAQ,CAACC,EAAd,CAAkB,CAChB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,uBAAV,CAAN,CACD,CACD,MAAOF,CAAAA,QAAQ,CAACG,IAAT,EAAP,CACD,CANH,EAOGJ,IAPH,CAOQ,SAACK,IAAD,CAAU,CACd,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACA,6BAA2BC,MAAM,CAACC,OAAP,CAAeH,IAAI,CAACI,KAApB,CAA3B,gCAAuD,CAAlD,6DAAOC,GAAP,uBAAYC,KAAZ,uBACHL,QAAQ,CAACM,IAAT,CAAc,CACZC,IAAI,CAAEH,GADM,CAEZC,KAAK,CAAEA,KAFK,CAAd,EAID,CACDlB,QAAQ,CAACF,iBAAiB,CAACuB,MAAlB,CAAyBR,QAAzB,CAAD,CAAR,CACAb,QAAQ,CAACF,iBAAiB,CAACM,mBAAlB,CAAsC,KAAtC,CAAD,CAAR,CACD,CAjBH,EAkBGkB,KAlBH,CAkBS,SAACC,GAAD,QAASC,CAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CAAT,EAlBT,EAmBD,CAvBsC,CAuBpC,CAACzB,YAAD,CAAeD,QAAf,CAvBoC,CAAvC,CAyBAX,SAAS,CAAC,UAAM,CACdc,mBAAmB,GACpB,CAFQ,CAEN,CAACA,mBAAD,CAFM,CAAT,CAIA,mBACE,KAAC,MAAD,wBACE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,KAAK,KAArB,uBACE,KAAC,QAAD,IADF,EADF,cAIE,KAAC,KAAD,EAAO,IAAI,CAAC,aAAZ,CAA0B,KAAK,KAA/B,uBACE,KAAC,UAAD,IADF,EAJF,GADF,EADF,CAYD,CAED,cAAeJ,CAAAA,GAAf","sourcesContent":["import { useEffect, useCallback } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Layout from \"./components/Layout/Layout\";\nimport HomePage from \"./pages/HomePage\";\nimport Currencies from \"./components/Currencies/Currencies\";\nimport { currenciesActions } from \"./store\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const baseCurrency = useSelector((state) => state.baseCurrency);\n\n  // fetching list of currencies for storing in global state (redux store)\n  // based on selected base currency (RUB by default)\n  const fetchCurrenciesList = useCallback(() => {\n    dispatch(currenciesActions.updateLoadingStatus(true));\n    const url = `https://api.exchangerate.host/latest?base=${baseCurrency}`;\n\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Something went wrong!\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        const curRates = [];\n        for (const [key, value] of Object.entries(data.rates)) {\n          curRates.push({\n            name: key,\n            value: value,\n          });\n        }\n        dispatch(currenciesActions.update(curRates));\n        dispatch(currenciesActions.updateLoadingStatus(false));\n      })\n      .catch((err) => console.log(err.message));\n  }, [baseCurrency, dispatch]);\n\n  useEffect(() => {\n    fetchCurrenciesList();\n  }, [fetchCurrenciesList]);\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage />\n        </Route>\n        <Route path=\"/currencies\" exact>\n          <Currencies />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}