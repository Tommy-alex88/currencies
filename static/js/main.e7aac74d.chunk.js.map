{"version":3,"sources":["components/Currencies/Currencies.module.css","components/Layout/MainNavigation.module.css","components/Exchange/Exchange.module.css","components/UI/Card/Card.module.css","components/UI/Spinner/Spinner.module.css","store/index.js","components/Layout/MainNavigation.js","components/Layout/Layout.js","components/UI/Card/Card.js","components/Exchange/Exchange.js","pages/HomePage.js","components/UI/Spinner/Spinner.js","components/Currencies/Currencies.js","App.js","index.js"],"names":["module","exports","currenciesSlice","createSlice","name","initialState","currencies","baseCurrency","loading","reducers","update","state","action","payload","changeBaseCurrency","updateLoadingStatus","store","configureStore","reducer","currenciesActions","actions","MainNavigation","className","classes","header","to","exact","logo","activeClassName","active","Layout","props","children","Card","card","ExchangeComponent","errorText","input","useRef","useState","result","setResult","error","setError","isValid","setIsValid","isFocused","setIsFocused","exchange","invalid","onSubmit","e","preventDefault","text","current","value","toString","amount","match","replace","resultCur","fromCur","toCur","url","fetch","then","res","ok","Error","json","data","catch","err","message","htmlFor","type","id","placeholder","ref","onChange","event","target","onFocus","onBlur","HomePage","Exchange","spinner","loader","Currencies","dispatch","useDispatch","useSelector","listItem","i","curList","map","el","even","container","info","base","size","rates","Spinner","App","fetchCurrenciesList","useCallback","response","curRates","Object","entries","key","push","console","log","useEffect","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7aac74d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Currencies_container__s5pXZ\",\"info\":\"Currencies_info__U6s_x\",\"base\":\"Currencies_base__sLYYY\",\"rates\":\"Currencies_rates__1g9te\",\"even\":\"Currencies_even__j9CQ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__2lqQ1\",\"logo\":\"MainNavigation_logo__1TgMx\",\"active\":\"MainNavigation_active__ydtOF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exchange\":\"Exchange_exchange__jwJ5s\",\"invalid\":\"Exchange_invalid__6SMR4\",\"result\":\"Exchange_result__5aWcM\",\"error\":\"Exchange_error__3deff\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1te4P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner_loader__fTuX5\",\"load1\":\"Spinner_load1__1BXDX\"};","import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n// initial state sets default base currency, empty array of currencies\n// and loading state\nconst initialState = {\n  currencies: [],\n  baseCurrency: \"RUB\",\n  loading: false,\n};\n\n// slice contains three reducers to manipulate the state:\n// to update currency list, to change base currency and to update(toggle) loading state\nconst currenciesSlice = createSlice({\n  name: \"currencies\",\n  initialState,\n  reducers: {\n    update(state, action) {\n      return { ...state, currencies: action.payload };\n    },\n    changeBaseCurrency(state, action) {\n      return { ...state, baseCurrency: action.payload };\n    },\n    updateLoadingStatus(state, action) {\n      return { ...state, loading: action.payload };\n    },\n  },\n});\n\n// confugureStore with root reducer\nconst store = configureStore({\n  reducer: currenciesSlice.reducer,\n});\n\nexport const currenciesActions = currenciesSlice.actions;\n\nexport default store;\n","import { NavLink } from \"react-router-dom\";\n\nimport classes from \"./MainNavigation.module.css\";\n\n// navbar with logo and two links\nconst MainNavigation = () => {\n  return (\n    <header className={classes.header}>\n      <NavLink to=\"/\" exact={true} className={classes.logo}>\n        Exchange Rate\n      </NavLink>\n      <nav>\n        <ul>\n          <li>\n            <NavLink to=\"/\" exact={true} activeClassName={classes.active}>\n              Home\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to=\"/currencies\"\n              exact={true}\n              activeClassName={classes.active}\n            >\n              Currencies\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\nexport default MainNavigation;\n","import { Fragment } from \"react\";\n\nimport MainNavigation from \"./MainNavigation\";\n\nconst Layout = (props) => {\n  return (\n    <Fragment>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","import classes from \"./Card.module.css\";\n\n//wrapper component for styling\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Exchange.module.css\";\n\n// Component takes string of given format for currencies pair, fetches to api\n// and returns result of conversion\nconst ExchangeComponent = () => {\n  const errorText = \"Enter valid Pair of Currencies (example: 1.3 USD to RUB)\";\n  const input = useRef();\n  const [result, setResult] = useState();\n  const [error, setError] = useState(\"\");\n  const [isValid, setIsValid] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  // focus and blur handlers are for input error-state styling\n  const inputFocusHandler = (event) => {\n    setIsFocused(true);\n  };\n\n  const inputBlurHandler = (event) => {\n    setIsFocused(false);\n  };\n\n  // entered value validation based on RegEx pattern\n  const inputChangeHandler = (event) => {\n    const value = event.target.value;\n    const isMatch = value.match(/(\\d*\\.?,?\\d*\\s[A-Z]{3}\\sto\\s[A-Z]{3}(?!.))/gi);\n    if (isMatch) {\n      setIsValid(true);\n      setError(null);\n    } else {\n      setIsValid(false);\n      setResult(null);\n    }\n  };\n\n  // fetching to api and getting the conversion result as response\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setError(null);\n    if (isValid) {\n      let text = input.current.value.toString();\n      const resultAmount = text.match(/(\\d*\\.?,?\\d*)/);\n      const amount = resultAmount[0].replace(/,/g, \".\");\n      amount <= 0 && setError(errorText);\n      const resultCur = text.match(/([A-Z]{3})/gi);\n      const fromCur = resultCur[0];\n      const toCur = resultCur[1];\n\n      const url = `https://api.exchangerate.host/convert?from=${fromCur}&to=${toCur}&amount=${amount}`;\n\n      fetch(url)\n        .then((res) => {\n          if (!res.ok) {\n            throw new Error(\"Response error\");\n          }\n          return res.json();\n        })\n        .then((data) => {\n          data.result ? setResult(data.result) : setError(errorText);\n          return;\n        })\n        .catch((err) => setError(err.message));\n    } else {\n      setError(errorText);\n    }\n  };\n\n  return (\n    <section\n      className={`${classes.exchange} ${\n        (error || !isValid) && isFocused && classes.invalid\n      }`}\n    >\n      <Card>\n        <form onSubmit={submitHandler}>\n          <label htmlFor=\"curr\">Enter currencies pair</label>\n          <input\n            type=\"text\"\n            id=\"curr\"\n            placeholder=\"example: 1.2 USD to EUR\"\n            ref={input}\n            onChange={inputChangeHandler}\n            onFocus={inputFocusHandler}\n            onBlur={inputBlurHandler}\n          />\n          <button type=\"submit\">Get Result</button>\n        </form>\n        <div className={classes.result}>\n          Result:\n          {error && <p className={classes.error}>{error}</p>}\n          {result && !error && <p>{result}</p>}\n        </div>\n      </Card>\n    </section>\n  );\n};\n\nexport default ExchangeComponent;\n","import Exchange from \"../components/Exchange/Exchange\";\n\nconst HomePage = () => {\n  return <Exchange />;\n};\n\nexport default HomePage;\n","import classes from \"./Spinner.module.css\";\n\nconst spinner = () => <div className={classes.loader}>Loading...</div>;\n\nexport default spinner;\n","import { useSelector, useDispatch } from \"react-redux\";\n\nimport Card from \"../UI/Card/Card\";\nimport Spinner from \"../UI/Spinner/Spinner\";\nimport { currenciesActions } from \"../../store\";\nimport classes from \"./Currencies.module.css\";\n\n// gives a list of currency exchange rates (from store)\n// and opportunity to change base currency\nconst Currencies = () => {\n  const dispatch = useDispatch();\n  const currencies = useSelector((state) => state.currencies);\n  const baseCurrency = useSelector((state) => state.baseCurrency);\n  const loading = useSelector((state) => state.loading);\n\n  //change base currency in the redux store. List is fetched again in App.js,\n  // where baseCurrency is set as dependancy in useEffect/useCallback\n  const baseChangeHandler = (event) => {\n    dispatch(currenciesActions.changeBaseCurrency(event.target.value));\n  };\n  // rendered list of currencies with adding gray-color styling for even rows\n  let listItem = null;\n  let i = 0;\n  const curList = currencies.map((el) => {\n    if (i % 2 === 0) {\n      listItem = (\n        <li\n          className={classes.even}\n          key={el.name}\n        >{`${el.name} = ${el.value} ${baseCurrency}`}</li>\n      );\n    } else {\n      listItem = (\n        <li key={el.name}>{`${el.name} = ${el.value} ${baseCurrency}`}</li>\n      );\n    }\n    i++;\n    return listItem;\n  });\n\n  return (\n    <section className={classes.container}>\n      <Card>\n        <div className={classes.info}>\n          Exhange rates for different currency pairs\n        </div>\n        <div className={classes.base}>\n          <p>Select base currency: </p>\n          <select size=\"1\" value={baseCurrency} onChange={baseChangeHandler}>\n            {currencies.map((el) => (\n              <option key={el.name} value={el.name}>\n                {el.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className={classes.rates}>\n          {loading && <Spinner />}\n          {!loading && <ul>{curList}</ul>}\n        </div>\n      </Card>\n    </section>\n  );\n};\nexport default Currencies;\n","import { useEffect, useCallback } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Layout from \"./components/Layout/Layout\";\nimport HomePage from \"./pages/HomePage\";\nimport Currencies from \"./components/Currencies/Currencies\";\nimport { currenciesActions } from \"./store\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const baseCurrency = useSelector((state) => state.baseCurrency);\n\n  // fetching list of currencies for storing in global state (redux store)\n  // based on selected base currency (RUB by default)\n  const fetchCurrenciesList = useCallback(() => {\n    dispatch(currenciesActions.updateLoadingStatus(true));\n    const url = `https://api.exchangerate.host/latest?base=${baseCurrency}`;\n\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Something went wrong!\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        const curRates = [];\n        for (const [key, value] of Object.entries(data.rates)) {\n          curRates.push({\n            name: key,\n            value: value,\n          });\n        }\n        dispatch(currenciesActions.update(curRates));\n        dispatch(currenciesActions.updateLoadingStatus(false));\n      })\n      .catch((err) => console.log(err.message));\n  }, [baseCurrency, dispatch]);\n\n  useEffect(() => {\n    fetchCurrenciesList();\n  }, [fetchCurrenciesList]);\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage />\n        </Route>\n        <Route path=\"/currencies\" exact>\n          <Currencies />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}